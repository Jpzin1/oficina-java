Plantação de morangos


import java.util.Scanner;

public class MelhorLocalPlantacao {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        int comprimento1 = scanner.nextInt();
        int largura1 = scanner.nextInt();
        
        
        int comprimento2 = scanner.nextInt();
        int largura2 = scanner.nextInt();
        
        
        int area1 = comprimento1 * largura1;
        int area2 = comprimento2 * largura2;
        
        
        int maiorArea = Math.max(area1, area2);
        
        
        System.out.println(maiorArea);
        
        scanner.close();
    }
}



import java.util.Scanner;

public class ContadorErros {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        int chute;
        int contadorErros = 0;
        
        
        do {
            chute = scanner.nextInt();
            if (chute != 2018) {
                contadorErros++;
            }
        } while (chute != 2018);
        
        
        System.out.println(contadorErros);
        
        scanner.close();
    }
}


/////////////////////////////////////////////////////////////////////////

Cobra Coral


import java.util.Arrays;
import java.util.Scanner;

public class CobraCoral {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        
        
        int[] sequencia = new int[4];
        for (int i = 0; i < 4; i++) {
            sequencia[i] = scanner.nextInt();
        }
        
        
        int[] padrãoVerdadeira = {1, 2, 1, 3}; // Supondo que B=1, V=2, P=3
        int[] padrãoFalsa = {1, 2, 3, 1}; // Supondo que B=1, V=2, P=3
        
        
        Arrays.sort(sequencia);
        Arrays.sort(padrãoVerdadeira);
        Arrays.sort(padrãoFalsa);
        
        
        if (Arrays.equals(sequencia, padrãoVerdadeira)) {
            System.out.println("V");
        } else if (Arrays.equals(sequencia, padrãoFalsa)) {
            System.out.println("F");
        } else {
            // Se não corresponder a nenhum padrão conhecido (não deveria acontecer com base nas restrições)
            System.out.println("Desconhecido");
        }
        
        scanner.close();
    }
}


/////////////////////////////////////////////////////////////////////////

Xadrez


import java.util.Scanner;

public class CorCasaXadrez {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        
        int L = scanner.nextInt(); // Número de linhas
        int C = scanner.nextInt(); // Número de colunas

        int cor = (L + C) % 2;

        
        System.out.println(cor);

        scanner.close();
    }
}


/////////////////////////////////////////////////////////////////////////

Exercicios POO


1)

public class Aluno {
    
    private String nome;
    private String matricula;
    private double[] notas;
    
    
    public Aluno(String nome, String matricula, double[] notas) {
        this.nome = nome;
        this.matricula = matricula;
        this.notas = notas;
    }
    
    /
    public double calcularMedia() {
        double soma = 0;
        for (double nota : notas) {
            soma += nota;
        }
        return soma / notas.length;
    }
    
    
    public String verificarSituacao() {
        double media = calcularMedia();
        if (media >= 6.0) {
            return "Aprovado";
        } else {
            return "Reprovado";
        }
    }
    
    
    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getMatricula() {
        return matricula;
    }

    public void setMatricula(String matricula) {
        this.matricula = matricula;
    }

    public double[] getNotas() {
        return notas;
    }

    public void setNotas(double[] notas) {
        this.notas = notas;
    }

    
    public void imprimirInformacoes() {
        System.out.println("Nome: " + nome);
        System.out.println("Matrícula: " + matricula);
        System.out.println("Média: " + calcularMedia());
        System.out.println("Situação: " + verificarSituacao());
    }
    
    
    public static void main(String[] args) {
        double[] notas = {7.0, 8.5, 6.0, 9.0}; // Notas exemplo
        Aluno aluno = new Aluno("João Silva", "12345", notas);
        
        aluno.imprimirInformacoes();
    }
}


/////////////////////////////////////////////////////////////////////////


2)

public class Pessoa {
    private String nome;
    private int idade;

    
    public Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }

    // Getters e Setters
    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public int getIdade() {
        return idade;
    }

    public void setIdade(int idade) {
        this.idade = idade;
    }

    // Método para imprimir informações básicas
    public void imprimirInformacoes() {
        System.out.println("Nome: " + nome);
        System.out.println("Idade: " + idade);
    }
}


import java.util.ArrayList;
import java.util.List;

public class Paciente extends Pessoa {
    private String condicao;
    private List<String> examesTratamentos;

    
    public Paciente(String nome, int idade, String condicao) {
        super(nome, idade);
        this.condicao = condicao;
        this.examesTratamentos = new ArrayList<>();
    }

    
    public String getCondicao() {
        return condicao;
    }

    public void setCondicao(String condicao) {
        this.condicao = condicao;
    }

    public List<String> getExamesTratamentos() {
        return examesTratamentos;
    }

    
    public void adicionarExameTratamento(String exameTratamento) {
        examesTratamentos.add(exameTratamento);
    }

    @Override
    public void imprimirInformacoes() {
        super.imprimirInformacoes();
        System.out.println("Condição: " + condicao);
        System.out.println("Exames/Tratamentos: " + examesTratamentos);
    }
}


import java.util.ArrayList;
import java.util.List;

public class Medico extends Pessoa {
    private String funcao;
    private List<Paciente> pacientesAtendidos;

    
    public Medico(String nome, int idade, String funcao) {
        super(nome, idade);
        this.funcao = funcao;
        this.pacientesAtendidos = new ArrayList<>();
    }

    
    public String getFuncao() {
        return funcao;
    }

    public void setFuncao(String funcao) {
        this.funcao = funcao;
    }

    public List<Paciente> getPacientesAtendidos() {
        return pacientesAtendidos;
    }

    
    public void adicionarPaciente(Paciente paciente) {
        pacientesAtendidos.add(paciente);
    }

    
    public void removerPaciente(Paciente paciente) {
        pacientesAtendidos.remove(paciente);
    }

    @Override
    public void imprimirInformacoes() {
        super.imprimirInformacoes();
        System.out.println("Função: " + funcao);
        System.out.println("Pacientes Atendidos: ");
        for (Paciente paciente : pacientesAtendidos) {
            System.out.println("- " + paciente.getNome());
        }
    }
}


/////////////////////////////////////////////////////////////////////////

3)

public class Autor {
    private String nome;
    private String nacionalidade;

    
    public Autor(String nome, String nacionalidade) {
        this.nome = nome;
        this.nacionalidade = nacionalidade;
    }

    
    public String getNome() {
        return nome;
    }

    public void setNome(String nome) {
        this.nome = nome;
    }

    public String getNacionalidade() {
        return nacionalidade;
    }

    public void setNacionalidade(String nacionalidade) {
        this.nacionalidade = nacionalidade;
    }

    
    public void imprimirInformacoes() {
        System.out.println("Nome do Autor: " + nome);
        System.out.println("Nacionalidade: " + nacionalidade);
    }
}



public class Livro {
    private String titulo;
    private String sinopse;
    private String editora;
    private Autor autor;

    
    public Livro(String titulo, String sinopse, String editora, Autor autor) {
        this.titulo = titulo;
        this.sinopse = sinopse;
        this.editora = editora;
        this.autor = autor;
    }

    
    public String getTitulo() {
        return titulo;
    }

    public void setTitulo(String titulo) {
        this.titulo = titulo;
    }

    public String getSinopse() {
        return sinopse;
    }

    public void setSinopse(String sinopse) {
        this.sinopse = sinopse;
    }

    public String getEditora() {
        return editora;
    }

    public void setEditora(String editora) {
        this.editora = editora;
    }

    public Autor getAutor() {
        return autor;
    }

    public void setAutor(Autor autor) {
        this.autor = autor;
    }

    
    public void imprimirInformacoes() {
        System.out.println("Título: " + titulo);
        System.out.println("Sinopse: " + sinopse);
        System.out.println("Editora: " + editora);
        System.out.print("Autor: ");
        autor.imprimirInformacoes();
        System.out.println();
    }
}


public class TesteSistemaLivros {
    public static void main(String[] args) {
        
        Autor autor1 = new Autor("J.K. Rowling", "Britânica");
        Autor autor2 = new Autor("George R.R. Martin", "Americano");

        
        Livro livro1 = new Livro(
            "Harry Potter e a Pedra Filosofal",
            "Um jovem descobre que é um bruxo e entra para uma escola mágica.",
            "Rocco",
            autor1
        );

        Livro livro2 = new Livro(
            "A Guerra dos Tronos",
            "Intrigas e batalhas em um mundo fictício medieval.",
            "Leya",
            autor2
        );

        // Imprimir informações dos livros
        System.out.println("Informações do Livro 1:");
        livro1.imprimirInformacoes();

        System.out.println("Informações do Livro 2:");
        livro2.imprimirInformacoes();
    }
}








